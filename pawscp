#!/usr/bin/env bash
#===============================================================================
#
#                    FILE: paws.sh
# 
#                 USAGE: ./pawscp
# 
#     DESCRIPTION: Provides file copy capabilities to/from AWS instances using known keys in the application
#                                utilise keys directory of the dcUtils respository
# 
#             OPTIONS: ---
#    REQUIREMENTS: ---
#                    BUGS: ---
#                 NOTES: ---
#                AUTHOR: Gregg Jensen (), gjensen@devops.center
#    ORGANIZATION: devops.center
#             CREATED: 04/03/2017 11:40:09
#            REVISION:    ---
#===============================================================================

#set -o nounset                                                            # Treat unset variables as an error
#set -x

# NOTE: requires pdsh and aws-cli

PROFILE="default"
SOURCE_DIR=$HOME
declare -a NEW_SSH_CONFIG_VARS
DO_NOT_RUN='false'

function usage
{
    echo -e "Description:"
    echo -e "    pawscp is a tool that makes it easier to transfer files to and from and AWS EC2 instances.   \n"
    echo -e "Usage:"
    echo -e "    Optional arguments that can be used with any other combination of arguments:"
    echo -e "    [-p PROFILE] [-r REGION] [-t \"TAG=VALUE\"\n"
    echo -e "    [host/all:]file1 [host/all:]file2" 
    echo 
    echo -e "  NOTE: the file1 and file2 arguments need to be the last two arguments"
    echo 
    echo -e "    The gist of this is to be able to copy a file from the local machine to a remote instance (host) or to all the "
    echo -e "    hosts for a given PROFILE and REGION. Hence, the following scenarios are supported: "
    echo -e "    if one of the files has just has a colon and no host then that file is either a directory or file name "
    echo -e "        that will receive the other file"
    echo -e "    if both of the files has have a colon and no host prepended to the file, then that is an error."
   # echo -e "    If there is no 'host:' or 'all:' -  it will take file1 and transfer it to all hosts found for PROFILE and REGION"
   # echo -e "        at the file2 location"
    echo -e "    If host is missing from either and each has a colon: that's an error since it doesn't know where to put it"
    echo -e "Examples:"
    echo -e "    copy a file from the local machine to a specific destination host and put the file in the home directory."
    echo -e "    pawscp -p devops.center ~/filetotransfer destHost:~"
    echo
    echo -e "    copy a file from the local machine to all instances available for the PROFILE and REGION host and put the file in the home directory."
    echo -e "    pawscp -p devops.center -r us-west-2 ~/filetotransfer :~"
    echo
    echo -e "    copy a file from the local machine to all instances available for the PROFILE and REGION with the given tag and put the file in the home directory."
    echo -e "    pawscp -p devops.center -r us-west-2 -t "App=dcDemoBlog" ~/filetotransfer :~"
}

if [[ -z $1 ]]; then
    usage
    exit 1
fi


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  getValueFromSettings
#   DESCRIPTION:  will get the value of the key passed in from ~/.dcConfig/settings
#    PARAMETERS:  the key to look for
#       RETURNS:  the value of the key once it's found
#-------------------------------------------------------------------------------
getValueFromSettings()
{
    keyToFind=$1
    aKeyValue=$(grep "^${keyToFind}" ~/.dcConfig/settings)
    justTheValue=${aKeyValue#*=}
    # remove any double quotes around the value
    var1=${justTheValue#*\"}
    unquotedVar=${var1%\"}
    echo "${unquotedVar#*=}"
}	# ----------  end of function getValueFromSettings  ----------


#-------------------------------------------------------------------------------
# handle arguments: need conditionals for appropriate number of arguments/options
#-------------------------------------------------------------------------------
doProcessDCEnv() 
{
    if [[ -z ${dcUTILS} ]]; then
        echo "Please set and export dcUTILS environment variable before starting this script"
        exit 1
    else
    set +e
        envToSource="$(${dcUTILS}/scripts/process_dc_env.py ${NEW_CMD_LINE})"

        if [[ $? -ne 0 ]]; then
            echo $envToSource
            exit 1
        else
            eval "$envToSource"
        fi
    set -e
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  doTheCopy
#   DESCRIPTION:  executes the file copy between the src and destination
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
doTheCopy()
{
#    echo "First file: ${FIRST_FILE}"
#    echo "First host: ${FIRST_HOST}"
#    echo "Second file: ${SECOND_FILE}"
#    echo "Second host: ${SECOND_HOST}"
    
#    if [[ ${FIRST_HOST_ALL} == 'true' ]]; then
#        echo "The second file will be copied to all instances into directory ${FIRST_FILE}"
#    elif [[ ${SECOND_HOST_ALL} == 'true' ]]; then
#        echo "The first file will be copied to all instances into directory ${SECOND_FILE}"
#    fi

    i=0
    numItems=$(echo ${DESCRIBE_ALL} | jq -c 'length')
    while [[ ${i} -lt ${numItems} ]]; do
        hostName=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].InstanceName")

        if [[ ${FIRST_HOST_ALL} == 'true' ]]; then
            myscp "${FIRST_FILE}" ${hostName} "${SECOND_FILE}" "${SECOND_HOST}"
        else
            myscp "${FIRST_FILE}" "${FIRST_HOST}" "${SECOND_FILE}" "${hostName}"
        fi

        # increment before getting the next one
        i=$((i+1))
    done
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  myscp
#   DESCRIPTION:  just the scp line
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
myscp()
{
    local FIRST_FILE=$1
    local FIRST_HOST=$2
    local SECOND_FILE=$3
    local SECOND_HOST=$4

    QUIET_OPTION=""
    if [[ ${PRINT_OUTPUT} == 'false' ]]; then
        QUIET_OPTION=" -q "
    fi
    if [[ -z ${FIRST_HOST} ]]; then
        if [[ ${DO_NOT_RUN} == 'true' ]]; then
            echo "scp -F ${TMP_CONFIG} ${FIRST_FILE} ${SECOND_HOST}:${SECOND_FILE}"
        else
            if [[ ${PRINT_OUTPUT} == 'true' ]]; then
                echo "transferring: ${FIRST_FILE} => $SECOND_HOST:$SECOND_FILE"
            fi
            scp ${QUIET_OPTION} -F ${TMP_CONFIG} "${FIRST_FILE}" "${SECOND_HOST}:${SECOND_FILE}"
        fi
    else
        if [[ ${DO_NOT_RUN} == 'true' ]]; then
            echo "scp -F ${TMP_CONFIG} ${FIRST_HOST}:${FIRST_FILE} ${SECOND_FILE}"
        else
            if [[ ${PRINT_OUTPUT} == 'true' ]]; then
                echo "transferring: ${FIRST_FILE} => $SECOND_HOST:$SECOND_FILE"
            fi
            scp ${QUIET_OPTION} -F ${TMP_CONFIG} "${FIRST_HOST}:${FIRST_FILE}" "${SECOND_FILE}"
        fi
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  getKeyDir
#   DESCRIPTION:  determine the path to the keys
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
getKeyDir() 
{
    COMMON_KEY_DIR=''
    if [[ ${APPNAME} ]]; then
        doProcessDCEnv
    else
        # we will be using the common key directory so we need to get the base name which is under
        # the Google Drive.  Since it could be named something else or just because it has a space in
        # the name, we need to expand it once so that we can use it below when finding the key.
        # dcCOMMON_SHARED_DIR is set when dcUtils is installed and put into the environmnet.
        dcCOMMON_SHARED_DIR=$(getValueFromSettings "dcCOMMON_SHARED_DIR")

        if [[ -z ${dcCOMMON_SHARED_DIR} ]]; then
            COMMON_KEY_DIR=$(cd $HOME/Googl*;pwd)
        else
            # now we need to check if this is internal or a customer
            dcInternal=$(getValueFromSettings "dcInternal")
            if [[ -z ${dcInternal} ]]; then
                COMMON_KEY_DIR=${dcCOMMON_SHARED_DIR}
            else
                # its internal so adjust the path
                COMMON_KEY_DIR=${dcCOMMON_SHARED_DIR%/*}
            fi
        fi
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  cleanUpPathList
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
cleanUpPathList()
{
    local pathsToKey="${1}"
    retVal=$2

    numPaths=${#pathsToKey[@]}
    if [[ numPaths -ne 0 ]]; then
        retPath=""
       c=0 
       while [[ ${c} -lt ${numPaths} ]]; do
            if [[ "${pathsToKey[${c}]}" != *"Permission denied"* ]] && [[ "${pathsToKey[${c}]}" != *"find:"* ]]; then
                eval "$retVal=\"${pathsToKey[${c}]}\""
                return
            fi
            c=$(($c+1))
       done

    else
        echo "ERROR: No access key file ($keyName.pem) for this instance: $HOST could be found"
        rm -f ${TMP_CONFIG}
        exit 1
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  getPathToKey
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
getPathToKey()
{
    local keyName=$1
    pathToKey=$2

    if [[ ${dcDEFAULT_APP_NAME} ]]; then
        # check the appUtils keys first
        pathsToKey=($(find ${BASE_CUSTOMER_DIR}/${dcDEFAULT_APP_NAME}/${CUSTOMER_APP_UTILS} -name "$keyName.pem"))
        numPaths=${#pathsToKey[@]}
        if [[ numPaths -ne 0 ]]; then
            RETVAL=''
            cleanUpPathList "${pathsToKey[@]}" RETVAL
            eval "$pathToKey=\"${RETVAL}\""
        else
            # not there so lets check the pool
            pathsToKey="$(find ${COMMON_KEY_DIR} -path "*/devops.center/keys/${keyName}.pem" 2>&1)"
            RETVAL=''
            cleanUpPathList "${pathsToKey[@]}" RETVAL
            eval "$pathToKey=\"${RETVAL}\""
        fi
    else
        if [[ -f "${COMMON_KEY_DIR}/devops.center/keys/${keyName}.pem" ]]; then
            RETVAL="${COMMON_KEY_DIR}/devops.center/keys/${keyName}.pem"
        elif [[ -f "${COMMON_KEY_DIR}/${PROFILE}/devops.center/keys/${keyName}.pem" ]]; then
            RETVAL="${COMMON_KEY_DIR}/${PROFILE}/devops.center/keys/${keyName}.pem"
        elif [[ -f ${HOME}/.ssh/devops.center/${keyName}.pem ]]; then
            RETVAL="${HOME}/.ssh/devops.center/${keyName}.pem"
        else
            RETVAL="${COMMON_KEY_DIR}/${PROFILE}/keys/${keyName}.pem"
        fi
        eval "$pathToKey=\"${RETVAL}\""
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  callInstanceInfo
#   DESCRIPTION:  This function will call the instanceinfo.py script and give it
#                 the appropriate arguments.  It will take as one argument the
#                 string that names the shellCommand instanceinfo.py needs to run with
#                 A second argument is the set of tags (as one string) to use
#                 This second argument is optional
#    PARAMETERS:
#       RETURNS:
#-------------------------------------------------------------------------------
callInstanceInfo ()
{
    local shellCommand=$1
    local tagToUse="$2"
    local sortKey=$3

    # we need to build up the command to run with the provided arguments
    CMD_TO_RUN="${dcUTILS}/scripts/instanceinfo.py -sc ${shellCommand} -c ${PROFILE}"

    if [[ -n ${REGION} ]]; then
        CMD_TO_RUN+=" -r ${REGION} "
    fi

    if [[ -n $tagToUse ]]; then
        #-------------------------------------------------------------------------------
        # ensure there isn't a comma after each key=value pair
        #-------------------------------------------------------------------------------
        tagsNoComma=${tagToUse//,/}
        CMD_TO_RUN+=" -t "
        CMD_TO_RUN+="${tagsNoComma}"
        CMD_TO_RUN+=" "
        if [[ -n ${sortKey} ]]; then
            CMD_OUTPUT=$(${CMD_TO_RUN} -t "${tagsNoComma}")
            if [[ $? -eq 0 ]]; then
                INST_INFO_OUTPUT=$(echo ${CMD_OUTPUT} | jq -c "sort_by(.${sortKey})" )
            else
                echo ${CMD_OUTPUT}
                exit 1
            fi
        else
            CMD_OUTPUT=$(${CMD_TO_RUN} -t "${tagsNoComma}")
            if [[ $? -eq 0 ]]; then
                INST_INFO_OUTPUT=${CMD_OUTPUT}
            else
                echo ${CMD_OUTPUT}
                exit 1
            fi
        fi
    else
        if [[ -n ${sortKey} ]]; then
            CMD_OUTPUT=$(${CMD_TO_RUN})
            if [[ $? -eq 0 ]]; then
                INST_INFO_OUTPUT=$(echo ${CMD_OUTPUT} | jq -c "sort_by(.${sortKey})" )
            else
                echo ${CMD_OUTPUT}
                exit 1
            fi
        else
            CMD_OUTPUT=$(${CMD_TO_RUN})
            if [[ $? -eq 0 ]]; then
                INST_INFO_OUTPUT=${CMD_OUTPUT}
            else
                echo ${CMD_OUTPUT}
                exit 1
            fi
        fi
    fi
}  # -------- end function callInstanceInfo


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  determineHosts
#   DESCRIPTION:  Called if the user doesn't specify one host in the copy
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
determineHosts()
{
    #-------------------------------------------------------------------------------
    # determine the file and host to copy between
    #-------------------------------------------------------------------------------
    FIRST_HOST_ALL='false'
    if [[ ${FIRST_ARG} == *":"* ]]; then
        FIRST_FILE=${FIRST_ARG#*:}
        FIRST_HOST=${FIRST_ARG%:*}
        if [[ -z ${FIRST_HOST} ]];  then
            # they put the colon but no host meaning all hosts
            FIRST_HOST_ALL='true'
        fi
    else
        FIRST_FILE=${FIRST_ARG}
    fi

    SECOND_HOST_ALL='false'
    if [[ ${SECOND_ARG} == *":"* ]]; then
        SECOND_FILE=${SECOND_ARG#*:}
        SECOND_HOST=${SECOND_ARG%:*}
        if [[ -z ${SECOND_HOST} ]];  then
            # they put the colon but no host meaning all hosts
            SECOND_HOST_ALL='true'
        fi
    else
        SECOND_FILE=${SECOND_ARG}
    fi

    if [[ ${FIRST_HOST} ]] && [[ ${SECOND_HOST} ]]; then
        echo 
        echo "There is a host associated with both files, and that is not supported."
        echo
        exit 1
    fi


    if [[ -z ${FIRST_HOST} ]] && [[ -z ${SECOND_HOST} ]]; then
        #echo "you want to copy to one or many instances"
        callInstanceInfo "listOfIPAddresses" "${TAG}" "InstanceName"
        DESCRIBE_ALL=${INST_INFO_OUTPUT}

    else
        # you have a single host to copy to so get the InstanceInfo for this host
        if [[ ${FIRST_HOST} ]]; then
            HOST_TO_USE=${FIRST_HOST}
        else
            HOST_TO_USE=${SECOND_HOST}
        fi

        # need to add the name
        # TODO test this to see if we want to add to the tag or replace it
        TAG+="Name=${HOST_TO_USE}"
        callInstanceInfo "listOfIPAddresses" "${TAG}" "InstanceName"
        DESCRIBE_ALL=${INST_INFO_OUTPUT}

    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  createSSHConfigFile
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
createSSHConfigFile()
{
    #-------------------------------------------------------------------------------
    # create .ssh directory if it doesn't exist
    #-------------------------------------------------------------------------------
    if [[ ! -d "${SOURCE_DIR}/.ssh" ]]; then
        mkdir "${SOURCE_DIR}/.ssh"
    fi

    #-------------------------------------------------------------------------------
    # go through the instances returned and create a temporary .ssh/config.XXXXX
    # file to use to access the hosts
    #-------------------------------------------------------------------------------
    TMP_CONFIG=$(mktemp "${HOME}"/.ssh/.config.XXXXX)
    i=0
    numItems=$(echo ${DESCRIBE_ALL} | jq -c 'length')
    while [[ ${i} -lt ${numItems} ]]; do
        hostName=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].InstanceName")
        instancePublicIP=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].PublicIpAddress")
        instancePrivateIP=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].PrivateIpAddress")
        instancePublicPort=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].PublicPort")
        instancePrivatePort=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].PrivatePort")
        keyName=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].DestKey")
        gateway=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].Gateway")

        # now get the path to the key
        pathToKey=''
        getPathToKey ${keyName} pathToKey

        # get the login if there is one
        destLogin=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].DestLogin")
        if [[ -z ${destLogin} ]]; then
            destLogin="ubuntu"
        fi

        # ok now we need to add the item to the temporary ssh config file
        echo "Host ${hostName}" >> ${TMP_CONFIG}
        if [[ -z ${instancePublicIP} ]]; then
            # the private information goes here
            echo " hostname ${instancePrivateIP}" >> ${TMP_CONFIG}
            # and put the port
            if [[ -z ${instancePrivatePort} ]]; then
                echo " port 22" >> ${TMP_CONFIG}
            else
                echo " port ${instancePrivatePort}" >> ${TMP_CONFIG}
            fi
        else
            # put the public information
            echo " hostname ${instancePublicIP}" >> ${TMP_CONFIG}
            # and put the port
            if [[ -z ${instancePublicPort} ]]; then
                echo " port 22" >> ${TMP_CONFIG}
            else
                echo " port ${instancePublicPort}" >> ${TMP_CONFIG}
            fi
        fi
        echo " identityfile \"${pathToKey}\"" >> ${TMP_CONFIG}
        echo " user ${destLogin}" >> ${TMP_CONFIG}
        if [[ ! -z ${gateway} ]]; then
            # there is a gateway entry so we need to get the connect parts for this instance
            callInstanceInfo "connectParts" "Name=${hostName}"
            gatewayInfo=${INST_INFO_OUTPUT}

            jumpServerHost=$(echo ${gatewayInfo} | jq -r ".[].JumpServerHost")
            jumpServerPort=$(echo ${gatewayInfo} | jq -r ".[].JumpServerPort")
            jumpServerLogin=$(echo ${gatewayInfo} | jq -r ".[].JumpServerLogin")
            jumpServerKey=$(echo ${gatewayInfo} | jq -r ".[].JumpServerKey")

            jumpServerPathToKey=''
            getPathToKey ${jumpServerKey} jumpServerPathToKey
            jumpServerCommand="ProxyCommand ssh -i ${jumpServerPathToKey} -W %h:%p -p ${jumpServerPort} ${jumpServerLogin}@${jumpServerHost}"
            echo " ${jumpServerCommand}" >> ${TMP_CONFIG}
        fi
        echo >> ${TMP_CONFIG}

        # increment before getting the next one
        i=$((i+1))
    done

}


#---- end of functions ---------------------------------------------------------

#---- start of main ------------------------------------------------------------

NEW_CMD_LINE=''
PRINT_OUTPUT='true'
while [[ $# -gt 0 ]]; do
    case $1 in
        -p ) shift
                PROFILE=$1
                ;;
        -r ) shift
                REGION=$1
	            ;;
        -t ) shift
                TAG=$1
                ;;
        -q | --quiet )
             PRINT_OUTPUT='false'
                 ;;
        --test )
             DO_NOT_RUN='true'
                 ;;
        -h ) usage
             exit 1
	             ;;
 [!-]* ) if [[ $# -eq 2 ]]; then
             FIRST_ARG=$1
             SECOND_ARG=$2
         fi
                 ;;
#         * ) echo -e "Unrecognized input.\n"
#             usage
#             exit 1
    esac
    shift
done

# determine the key dir
getKeyDir

#determine the hosts
determineHosts

# create the ssh config file the scp will use
createSSHConfigFile

# do the copy
doTheCopy

#-------------------------------------------------------------------------------
# remove temporary .ssh/config file
#-------------------------------------------------------------------------------
if [[ -f "$TMP_CONFIG" ]]; then
    rm "$TMP_CONFIG"
fi
