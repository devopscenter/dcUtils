#!/usr/bin/env bash
#===============================================================================
#
#                    FILE: paws.sh
# 
#                 USAGE: ./pawscp
# 
#     DESCRIPTION: Provides file copy capabilities to/from AWS instances using known keys in the application
#                                utilise keys directory of the dcUtils respository
# 
#             OPTIONS: ---
#    REQUIREMENTS: ---
#                    BUGS: ---
#                 NOTES: ---
#                AUTHOR: Gregg Jensen (), gjensen@devops.center
#    ORGANIZATION: devops.center
#             CREATED: 04/03/2017 11:40:09
#            REVISION:    ---
#===============================================================================

#set -o nounset                                                            # Treat unset variables as an error
#set -x

# NOTE: requires pdsh and aws-cli

PROFILE="default"

function usage
{
    echo -e "Description:"
    echo -e "    pawscp is a tool that makes it easier to transfer files to and from and AWS EC2 instances.   \n"
    echo -e "Usage:"
    echo -e "    Optional arguments that can be used with any other combination of arguments:"
    echo -e "    [-p PROFILE] [-r REGION]\n"
    echo -e "    [host/all:]file1 [host/all:]file2" 
    echo 
    echo -e "    The gist of this is to be able to copy a file from the local machine to a remote instance (host) or to all the "
    echo -e "    hosts for a given PROFILE and REGION. Hence, the following scenarios are supported: "
    echo -e "    if one of the files has 'all:'  - then that file is either a directory or file name "
    echo -e "        that will receive the other file"
    echo -e "    if both of the files has 'all:' -  prepended to the file, then that is an error."
    echo -e "    If there is no 'host:' or 'all:' -  it will take file1 and transfer it to all hosts found for PROFILE and REGION"
    echo -e "        at the file2 location"
    echo -e "    If host is missing from either and one has a colon: it will take the file that doesn't have the colon and put it"
    echo -e "        on each host found in the PROFILE and REGION "
    echo -e "    If host is missing from either and each has a colon: that's an error since it doesn't know where to put it"
    echo -e "    If host is available one each: that's not supported yet ... to copy between instances"
    echo -e "Examples:"
    echo -e "    List tags for all instances for the default account:    paws -L"
}

if [[ -z $1 ]]; then
    usage
    exit 1
fi

#-------------------------------------------------------------------------------
# handle arguments: need conditionals for appropriate number of arguments/options
#-------------------------------------------------------------------------------
doProcessDCEnv() 
{
    if [[ -z ${dcUTILS} ]]; then
        echo "Please set and export dcUTILS environment variable before starting this script"
        exit 1
    else
    set +e
        envToSource="$(${dcUTILS}/scripts/process_dc_env.py ${NEW_CMD_LINE})"

        if [[ $? -ne 0 ]]; then
            echo $envToSource
            exit 1
        else
            eval "$envToSource"
        fi
    set -e
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  checkHostAccess
#   DESCRIPTION:  function that will iterate through all instances found for a 
#                 given profile and try to log in.  It will print out any that 
#                 could not be reached.  If there is a new IP of the instance that
#                 needs to be added to the local authorization file it will be accepted
#                 and added.
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
checkHostAccess()
{
    echo "Going to checking all the hosts for ssh access.  A response for each connection will be presented:"

    # first check for expect so that we can script the ssh login
    EXPECT=$(which expect)

    if [[ ! ${EXPECT} ]] ; then 
        echo "Can not run without the \'expect\' module available"
        exit 1
    fi

    NAME_LIST=$(echo $DESCRIBE_ALL| jq -r '.Reservations[].Instances[].Tags[]| select(.Key == "Name").Value')


    for HOST_NAME in  ${NAME_LIST[@]}
    do
        # connect to the single host
        #ssh -oStrictHostKeyChecking=no -oCheckHostIP=no -F "$TMP_CONFIG" "$HOST"
        ${EXPECT} -f scripts/sshcmd.exp ${HOST_NAME} ${TMP_CONFIG} 2>&1 > /dev/null
        if [[ $? -eq 0 ]]; then
            echo "${HOST_NAME} is good"
        else
            echo "${HOST_NAME} has a problem logging in"
        fi
    done
}



NEW_CMD_LINE=''
APPNAME=''
WORKSPACENAME=''
while [[ $# -gt 0 ]]; do
    case $1 in
        -p ) shift
                PROFILE=$1
                ;;
        -r ) shift
                REGION=$1
	            ;;
        -t ) shift
                TAG=$1
                ;;
        -w ) shift
                HOSTS=$1
	            ;;
        -l ) LIST_NAMES='true'
	            ;;
        -c ) if [[ $# -eq 2 ]]; then
                shift
	            HOST=$1
	        else
	            CONNECT='true'
	        fi
                 ;;
        -L ) LIST_NAMES='true'
             LIST_ALL='true'
                 ;;
        -a | --appName) shift
             APPNAME=$1
             dcDEFAULT_APP_NAME=$1
             NEW_CMD_LINE="${NEW_CMD_LINE} --appName $APPNAME"
                 ;;
        --workspaceName) shift
             NEW_CMD_LINE="${NEW_CMD_LINE} --workspaceName $1"
                 ;;
        -e | --env) shift
             NEW_CMD_LINE="${NEW_CMD_LINE} --env $1"
                 ;;
        -x | --checkHostAccess)
             CHECK_HOST_ACCESS='true'
                 ;;
        -h ) usage
             exit 1
	             ;;
 [!-]* ) if [[ $# -eq 1 ]]; then
             PDSH_CMD=$1
	     elif ! [[ -z "$HOST" ]]; then
             echo -e "Too many/few of the 1 required parameters.\n"
             usage
             exit 1
         fi
                 ;;
#         * ) echo -e "Unrecognized input.\n"
#             usage
#             exit 1
    esac
    shift
done

COMMON_KEY_DIR=''
if [[ ${APPNAME} ]]; then
    doProcessDCEnv
else
    # we will be using the common key directory so we need to get the base name which is under
    # the Google Drive.  Since it could be named something else or just because it has a space in
    # the name, we need to expand it once so that we can use it below when finding the key.
    # dcCOMMON_SHARED_DIR is set when dcUtils is installed and put into the environmnet.
    aKeyValue=$(grep dcCOMMON_SHARED_DIR ~/.dcConfig/settings)
    var1=${aKeyValue#*\"}
    dcCOMMON_SHARED_DIR=${var1%\"}

    if [[ -z ${dcCOMMON_SHARED_DIR} ]]; then
        COMMON_KEY_DIR=$(cd $HOME/Googl*;pwd)
    else
        # now strip out the key and '=' to get to the path
        COMMON_KEY_DIR=${dcCOMMON_SHARED_DIR#*=}
    fi
fi

#-------------------------------------------------------------------------------
# check for the existance of pdsh/ssh command
#-------------------------------------------------------------------------------
if ! [[ "$LIST_NAMES" ]] && ! [[ "$CONNECT" ]] && ! [[ "$HOST" ]] && ! [[ ${CHECK_HOST_ACCESS} ]] && [[ -z "$PDSH_CMD" ]]; then
    echo -e "pdsh/ssh command required.\n"
    usage
    exit 1
fi

#-------------------------------------------------------------------------------
# get the directory of paws
# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
#-------------------------------------------------------------------------------
#SOURCE="${BASH_SOURCE[0]}"
#while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
#    SOURCE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
#    SOURCE="$(readlink "$SOURCE")"
#    [[ $SOURCE != /* ]] && SOURCE="$SOURCE_DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
#done
#SOURCE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
SOURCE_DIR=$HOME
#
#-------------------------------------------------------------------------------
# get full description of running instances from api and filter data using jq instead of with aws-cli
#-------------------------------------------------------------------------------
if ! [[ -z "$REGION" ]]; then
    DESCRIBE_ALL=$(aws --profile "$PROFILE" --region "$REGION" ec2 describe-instances --filters Name=instance-state-name,Values=running)
else
    DESCRIBE_ALL=$(aws --profile "$PROFILE" ec2 describe-instances --filters Name=instance-state-name,Values=running)
fi

#-------------------------------------------------------------------------------
# LIST ONLY
#-------------------------------------------------------------------------------
if [[ "$LIST_NAMES" == 'true' ]] || [[ "$CONNECT" == 'true' ]]; then
    LIST_FULL=$(echo $DESCRIBE_ALL| jq -cS '.Reservations[]|.Instances[]|[[[.Tags[]|select(.Key | contains("Name"))]|from_entries],[[.Tags[]|select(.Key | contains("Name")|not)]|from_entries]]'|sed 's/,{/: /g'|tr -d '[]{}"'|tr ':' '='|sed 's/= /: /g'|tr ',' ' ')

    i=1
    while read -r line; do
        #-------------------------------------------------------------------------------
        # FOR NAMES ONLY number each line to use for selection
        #-------------------------------------------------------------------------------
        if [[ "$LIST_ALL" != 'true' ]]; then
            line=$(echo -e "$line"|awk -F= '{print $2}'|awk '{print $1}')
        fi    
        #-------------------------------------------------------------------------------
        # FOR BOTH NAMES AND ALL
        #-------------------------------------------------------------------------------
        NUMBERED_LINE="${i}. ${line}\n"
        NUMBERED_LIST="${NUMBERED_LIST}${NUMBERED_LINE}"
        i=$((i+1))
    done < <(echo -e "$LIST_FULL"|grep -v '^$'|sort)

fi

#-------------------------------------------------------------------------------
# for -l option, output list and exit
#-------------------------------------------------------------------------------
if [[ "$LIST_NAMES" ]]; then
    echo -en "$NUMBERED_LIST"
    exit
fi

#-------------------------------------------------------------------------------
# for -c but no host specified, so prompt for input
#-------------------------------------------------------------------------------
if [[ -z "${HOST+x}" ]] && [[ "$CONNECT" ]]; then
    echo -e "$NUMBERED_LIST"
    echo "enter selection number (return to quit)"
    read -r number

    if [[ -z ${number} || ${number} -eq 0 ]]; then
        echo "exiting "
        exit 1
    fi

    while read -r line; do
        LINE_NUMBER=$(echo "$line"|awk -F. '{print $1}')
        if [[ "$LINE_NUMBER" == "$number" ]]; then
            HOST=$(echo -e "$line"|awk '{print $2}')
        fi
    done < <(echo -e "$NUMBERED_LIST")
fi
#-------------------------------------------------------------------------------
# if no -t option
#-------------------------------------------------------------------------------
if [[ -z "$TAG" ]]; then
    #-------------------------------------------------------------------------------
    # if -c option specified, create for single instance
    #-------------------------------------------------------------------------------
    if [[ "$HOST" ]]; then
        SSH_CONFIG_VARS=($(echo -e "$DESCRIBE_ALL"| jq "[.Reservations[]|select(.Instances[]|.Tags[]|.Key == \"Name\" and .Value == \""$HOST"\")]|{Reservations: .}"|jq -c '.Reservations[]|.Instances[]|[[.Tags[]|select(.Key | contains("Name"))|.Value],.PublicIpAddress,.KeyName]'))
    else
        #-------------------------------------------------------------------------------
        # if no -c and no -t, create ssh config for all instances
        #-------------------------------------------------------------------------------
        SSH_CONFIG_VARS=($(echo "$DESCRIBE_ALL"| jq -c '.Reservations[]|.Instances[]|[[.Tags[]|select(.Key | contains("Name"))|.Value],.PublicIpAddress,.KeyName]'))
    fi

#-------------------------------------------------------------------------------
# if -t option specified, create ssh config only for tagged instances
#-------------------------------------------------------------------------------
else
    #-------------------------------------------------------------------------------
    # ensure tags are properly formatted
    #-------------------------------------------------------------------------------
    if [[ "$TAG" =~ ^[a-zA-Z].*=[a-zA-Z].* ]]; then
        TAG_KEY=$(echo "$TAG"|awk -F\= '{ print $1 }')
        TAG_VALUE=$(echo "$TAG"|awk -F\= '{ print $2 }')
    else
        echo -e "Tags should be in the form key=value, no quotes\n"
        usage
        exit 1
    fi
    
    #-------------------------------------------------------------------------------
    # create ssh config for tagged instances
    #-------------------------------------------------------------------------------
    SSH_CONFIG_VARS=($(echo -e "$DESCRIBE_ALL"| jq "[.Reservations[]|select(.Instances[]|.Tags[]|.Key == \""$TAG_KEY"\" and .Value == \""$TAG_VALUE"\")]|{Reservations: .}"|jq -c '.Reservations[]|.Instances[]|[[.Tags[]|select(.Key | contains("Name"))|.Value],.PublicIpAddress,.KeyName]'))
fi

#-------------------------------------------------------------------------------
# create .ssh directory if it doesn't exist
#-------------------------------------------------------------------------------
if [[ ! -d "${SOURCE_DIR}/.ssh" ]]; then
    mkdir "${SOURCE_DIR}/.ssh"
fi

#-------------------------------------------------------------------------------
# create and populate temporary .ssh/config file
#-------------------------------------------------------------------------------
cleanUpPathList()
{
    local pathsToKey="${1}"
    retVal=$2

    numPaths=${#pathsToKey[@]}
    if [[ numPaths -ne 0 ]]; then
        retPath=""
       c=0 
       while [[ ${c} -lt ${numPaths} ]]; do
            if [[ "${pathsToKey[${c}]}" != *"Permission denied"* ]] && [[ "${pathsToKey[${c}]}" != *"find:"* ]]; then
                eval "$retVal=\"${pathsToKey[${c}]}\""
                return
            fi
            c=$(($c+1))
       done

    else
        echo "ERROR: No access key file ($keyName.pem) for this instance: $HOST could be found"
        rm -f ${TMP_CONFIG}
        exit 1
    fi
}

getPathToKey()
{
    local keyName=$1
    pathToKey=$2

    if [[ ${dcDEFAULT_APP_NAME} ]]; then
        # check the appUtils keys first
        pathsToKey=($(find ${BASE_CUSTOMER_DIR}/${dcDEFAULT_APP_NAME}/${CUSTOMER_APP_UTILS} -name "$keyName.pem"))
        numPaths=${#pathsToKey[@]}
        if [[ numPaths -ne 0 ]]; then
            RETVAL=''
            cleanUpPathList "${pathsToKey[@]}" RETVAL
            eval "$pathToKey=\"${RETVAL}\""
        else
            # not there so lets check the pool
            #pathsToKey="$(find $HOME/Google* -path "*/${PROFILE}/keys/${keyName}.pem" 2>&1)"
            pathsToKey="$(find ${COMMON_KEY_DIR} -path "*/${PROFILE}/keys/${keyName}.pem" 2>&1)"
            RETVAL=''
            cleanUpPathList "${pathsToKey[@]}" RETVAL
            eval "$pathToKey=\"${RETVAL}\""
        fi
    else
        RETVAL="${COMMON_KEY_DIR}/${PROFILE}/keys/${keyName}.pem"
        eval "$pathToKey=\"${RETVAL}\""
    fi
}

TMP_CONFIG=$(mktemp "${HOME}"/.ssh/.config.XXXXX)
numSSH_CONFIG="${#SSH_CONFIG_VARS[@]}"
q=0
declare -a NEW_SSH_CONFIG_VARS
while [[ $q -lt ${numSSH_CONFIG} ]]; do
    ITEMLIST=()
    ITEMSTRING=''
    ITEMSTRING=$(echo "${SSH_CONFIG_VARS[${q}]}"|tr -d ']["')
    IFS=$','; ITEMLIST=($ITEMSTRING); unset IFS;
    numItems=${#ITEMLIST[@]}
    if [[ $numItems -gt 2 ]]; then
        if [[ ${ITEMLIST[2]} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]];then
            q=$(($q+1))
            continue
        fi
        pathToKey=''
        getPathToKey ${ITEMLIST[2]} pathToKey
        NEW_SSH_CONFIG_VARS+=("${ITEMLIST[0]},${ITEMLIST[1]},${pathToKey}")
    fi
    q=$(($q+1))
done

for theItem in "${NEW_SSH_CONFIG_VARS[@]}"
do
    IFS=$','; configItemList=($theItem); unset IFS;
    echo "Host ${configItemList[0]}" >> $TMP_CONFIG
    echo " hostname ${configItemList[1]}" >> $TMP_CONFIG
    echo " identityfile \"${configItemList[2]}\"" >> $TMP_CONFIG
    echo " user ubuntu" >> $TMP_CONFIG
    echo >> $TMP_CONFIG
done

#-------------------------------------------------------------------------------
# if the -c option is specified, connect to the host with ssh
#-------------------------------------------------------------------------------
if [[ "$HOST" ]] || [[ ${CHECK_HOST_ACCESS} == 'true' ]]; then
    if [[ ${CHECK_HOST_ACCESS} == 'true' ]]; then
        # run the function that will itereate over all the hosts
        checkHostAccess
    else
        # connect to the single host
        ssh -F "$TMP_CONFIG" "$HOST"
    fi
#-------------------------------------------------------------------------------
# otherwise, run commands with pdsh
#-------------------------------------------------------------------------------
else
    if ! [[ "$HOSTS" ]]; then
        #-------------------------------------------------------------------------------
        # generate host list to pass pdsh
        #-------------------------------------------------------------------------------
        HOSTS=$(grep Host "$TMP_CONFIG"|awk '{print $2}'|tr '\n' ',')
    fi
    #-------------------------------------------------------------------------------
    # final pdsh command
    #-------------------------------------------------------------------------------
    PDSH_SSH_ARGS_APPEND=$(echo -F "$TMP_CONFIG") pdsh -u 30 -w "$HOSTS" "$PDSH_CMD"
fi

#-------------------------------------------------------------------------------
# remove temporary .ssh/config file
#-------------------------------------------------------------------------------
 if [[ -f "$TMP_CONFIG" ]]; then
     rm "$TMP_CONFIG"
 fi
