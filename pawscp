#!/usr/bin/env bash
#===============================================================================
#
#                    FILE: paws.sh
# 
#                 USAGE: ./pawscp
# 
#     DESCRIPTION: Provides file copy capabilities to/from AWS instances using known keys in the application
#                                utilise keys directory of the dcUtils respository
# 
#             OPTIONS: ---
#    REQUIREMENTS: ---
#                    BUGS: ---
#                 NOTES: ---
#                AUTHOR: Gregg Jensen (), gjensen@devops.center
#    ORGANIZATION: devops.center
#             CREATED: 04/03/2017 11:40:09
#            REVISION:    ---
#===============================================================================

#set -o nounset                                                            # Treat unset variables as an error
#set -x

# NOTE: requires pdsh and aws-cli

PROFILE="default"
SOURCE_DIR=$HOME
declare -a NEW_SSH_CONFIG_VARS
DO_NOT_RUN='false'

function usage
{
    echo -e "Description:"
    echo -e "    pawscp is a tool that makes it easier to transfer files to and from and AWS EC2 instances.   \n"
    echo -e "Usage:"
    echo -e "    Optional arguments that can be used with any other combination of arguments:"
    echo -e "    [-p PROFILE] [-r REGION] [-t \"TAG=VALUE\"\n"
    echo -e "    [host/all:]file1 [host/all:]file2" 
    echo 
    echo -e "  NOTE: the file1 and file2 arguments need to be the last two arguments"
    echo 
    echo -e "    The gist of this is to be able to copy a file from the local machine to a remote instance (host) or to all the "
    echo -e "    hosts for a given PROFILE and REGION. Hence, the following scenarios are supported: "
    echo -e "    if one of the files has just has a colon and no host then that file is either a directory or file name "
    echo -e "        that will receive the other file"
    echo -e "    if both of the files has have a colon and no host prepended to the file, then that is an error."
   # echo -e "    If there is no 'host:' or 'all:' -  it will take file1 and transfer it to all hosts found for PROFILE and REGION"
   # echo -e "        at the file2 location"
    echo -e "    If host is missing from either and each has a colon: that's an error since it doesn't know where to put it"
    echo -e "Examples:"
    echo -e "    copy a file from the local machine to a specific destination host and put the file in the home directory."
    echo -e "    pawscp -p devops.center ~/filetotransfer destHost:~"
    echo
    echo -e "    copy a file from the local machine to all instances available for the PROFILE and REGION host and put the file in the home directory."
    echo -e "    pawscp -p devops.center -r us-west-2 ~/filetotransfer :~"
    echo
    echo -e "    copy a file from the local machine to all instances available for the PROFILE and REGION with the given tag and put the file in the home directory."
    echo -e "    pawscp -p devops.center -r us-west-2 -t "App=dcDemoBlog" ~/filetotransfer :~"
}

if [[ -z $1 ]]; then
    usage
    exit 1
fi

#-------------------------------------------------------------------------------
# handle arguments: need conditionals for appropriate number of arguments/options
#-------------------------------------------------------------------------------
doProcessDCEnv() 
{
    if [[ -z ${dcUTILS} ]]; then
        echo "Please set and export dcUTILS environment variable before starting this script"
        exit 1
    else
    set +e
        envToSource="$(${dcUTILS}/scripts/process_dc_env.py ${NEW_CMD_LINE})"

        if [[ $? -ne 0 ]]; then
            echo $envToSource
            exit 1
        else
            eval "$envToSource"
        fi
    set -e
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  doTheCopy
#   DESCRIPTION:  executes the file copy between the src and destination
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
doTheCopy()
{
#    echo "First file: ${FIRST_FILE}"
#    echo "First host: ${FIRST_HOST}"
#    echo "Second file: ${SECOND_FILE}"
#    echo "Second host: ${SECOND_HOST}"
    
#    if [[ ${FIRST_HOST_ALL} == 'true' ]]; then
#        echo "The second file will be copied to all instances into directory ${FIRST_FILE}"
#    elif [[ ${SECOND_HOST_ALL} == 'true' ]]; then
#        echo "The first file will be copied to all instances into directory ${SECOND_FILE}"
#    fi

    for theItem in "${NEW_SSH_CONFIG_VARS[@]}"
    do
        IFS=$','; configItemList=($theItem); unset IFS;
        if [[ ${FIRST_HOST_ALL} == 'true' ]]; then
            myscp "${FIRST_FILE}" "${configItemList[0]}" "${SECOND_FILE}" "${SECOND_HOST}"
        else
            myscp "${FIRST_FILE}" "${FIRST_HOST}" "${SECOND_FILE}" "${configItemList[0]}"
        fi
    done
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  myscp
#   DESCRIPTION:  just the scp line
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
myscp()
{
    local FIRST_FILE=$1
    local FIRST_HOST=$2
    local SECOND_FILE=$3
    local SECOND_HOST=$4
    if [[ -z ${FIRST_HOST} ]]; then
        if [[ ${DO_NOT_RUN} == 'true' ]]; then
            echo "scp -F ${TMP_CONFIG} ${FIRST_FILE} ${SECOND_HOST}:${SECOND_FILE}"
        else
            scp -q -F ${TMP_CONFIG} "${FIRST_FILE}" "${SECOND_HOST}:${SECOND_FILE}"
        fi
    else
        if [[ ${DO_NOT_RUN} == 'true' ]]; then
            echo "scp -F ${TMP_CONFIG} ${FIRST_HOST}:${FIRST_FILE} ${SECOND_FILE}"
        else
            scp -q -F ${TMP_CONFIG} "${FIRST_HOST}:${FIRST_FILE}" "${SECOND_FILE}"
        fi
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  getKeyDir
#   DESCRIPTION:  determine the path to the keys
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
getKeyDir() 
{
    COMMON_KEY_DIR=''
    if [[ ${APPNAME} ]]; then
        doProcessDCEnv
    else
        # we will be using the common key directory so we need to get the base name which is under
        # the Google Drive.  Since it could be named something else or just because it has a space in
        # the name, we need to expand it once so that we can use it below when finding the key.
        # dcCOMMON_SHARED_DIR is set when dcUtils is installed and put into the environmnet.
        aKeyValue=$(grep dcCOMMON_SHARED_DIR ~/.dcConfig/settings)
        var1=${aKeyValue#*\"}
        dcCOMMON_SHARED_DIR=${var1%\"}

        if [[ -z ${dcCOMMON_SHARED_DIR} ]]; then
            COMMON_KEY_DIR=$(cd $HOME/Googl*;pwd)
        else
            # now strip out the key and '=' to get to the path
            COMMON_KEY_DIR=${dcCOMMON_SHARED_DIR#*=}
        fi
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  cleanUpPathList
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
cleanUpPathList()
{
    local pathsToKey="${1}"
    retVal=$2

    numPaths=${#pathsToKey[@]}
    if [[ numPaths -ne 0 ]]; then
        retPath=""
       c=0 
       while [[ ${c} -lt ${numPaths} ]]; do
            if [[ "${pathsToKey[${c}]}" != *"Permission denied"* ]] && [[ "${pathsToKey[${c}]}" != *"find:"* ]]; then
                eval "$retVal=\"${pathsToKey[${c}]}\""
                return
            fi
            c=$(($c+1))
       done

    else
        echo "ERROR: No access key file ($keyName.pem) for this instance: $HOST could be found"
        rm -f ${TMP_CONFIG}
        exit 1
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  getPathToKey
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
getPathToKey()
{
    local keyName=$1
    pathToKey=$2

    if [[ ${dcDEFAULT_APP_NAME} ]]; then
        # check the appUtils keys first
        pathsToKey=($(find ${BASE_CUSTOMER_DIR}/${dcDEFAULT_APP_NAME}/${CUSTOMER_APP_UTILS} -name "$keyName.pem"))
        numPaths=${#pathsToKey[@]}
        if [[ numPaths -ne 0 ]]; then
            RETVAL=''
            cleanUpPathList "${pathsToKey[@]}" RETVAL
            eval "$pathToKey=\"${RETVAL}\""
        else
            # not there so lets check the pool
            pathsToKey="$(find ${COMMON_KEY_DIR} -path "*/devops.center/keys/${keyName}.pem" 2>&1)"
            RETVAL=''
            cleanUpPathList "${pathsToKey[@]}" RETVAL
            eval "$pathToKey=\"${RETVAL}\""
        fi
    else
        DC_COMMON_KEY_DIR=${COMMON_KEY_DIR%/*}
        if [[ -f "${COMMON_KEY_DIR}/devops.center/keys/${keyName}.pem" ]]; then
            RETVAL="${COMMON_KEY_DIR}/devops.center/keys/${keyName}.pem"
        elif [[ -f "${COMMON_KEY_DIR}/${PROFILE}/devops.center/keys/${keyName}.pem" ]]; then
            RETVAL="${COMMON_KEY_DIR}/${PROFILE}/devops.center/keys/${keyName}.pem"
        elif [[ -f "${DC_COMMON_KEY_DIR}/${PROFILE}/devops.center/keys/${keyName}.pem" ]]; then
            RETVAL="${DC_COMMON_KEY_DIR}/${PROFILE}/devops.center/keys/${keyName}.pem"
        else
            RETVAL="${COMMON_KEY_DIR}/${PROFILE}/keys/${keyName}.pem"
        fi
        eval "$pathToKey=\"${RETVAL}\""
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  determineHosts
#   DESCRIPTION:  Called if the user doesn't specify one host in the copy
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
determineHosts()
{
    #-------------------------------------------------------------------------------
    # determine the file and host to copy between
    #-------------------------------------------------------------------------------
    FIRST_HOST_ALL='false'
    if [[ ${FIRST_ARG} == *":"* ]]; then
        FIRST_FILE=${FIRST_ARG#*:}
        FIRST_HOST=${FIRST_ARG%:*}
        if [[ -z ${FIRST_HOST} ]];  then
            # they put the colon but no host meaning all hosts
            FIRST_HOST_ALL='true'
        fi
    else
        FIRST_FILE=${FIRST_ARG}
    fi

    SECOND_HOST_ALL='false'
    if [[ ${SECOND_ARG} == *":"* ]]; then
        SECOND_FILE=${SECOND_ARG#*:}
        SECOND_HOST=${SECOND_ARG%:*}
        if [[ -z ${SECOND_HOST} ]];  then
            # they put the colon but no host meaning all hosts
            SECOND_HOST_ALL='true'
        fi
    else
        SECOND_FILE=${SECOND_ARG}
    fi

    if [[ ${FIRST_HOST} ]] && [[ ${SECOND_HOST} ]]; then
        echo 
        echo "There is a host associated with both files, and that is not supported."
        echo
        exit 1
    fi


    if [[ -z ${FIRST_HOST} ]] && [[ -z ${SECOND_HOST} ]]; then
        #echo "you want to copy to one or many instances"

        #-------------------------------------------------------------------------------
        # if no -t option
        #-------------------------------------------------------------------------------
        if [[ -z "$TAG" ]]; then
            #-------------------------------------------------------------------------------
            # if no -t, create ssh config for all instances
            #-------------------------------------------------------------------------------

            if [[ ${REGION} ]]; then
                SSH_CONFIG_VARS=($(aws --profile "$PROFILE" --region "$REGION" ec2 describe-instances --filters Name=instance-state-name,Values=running | jq -c '.Reservations[]|.Instances[]|[[.Tags[]|select(.Key | contains("Name"))|.Value],.PublicIpAddress,.KeyName]'))
            else
                SSH_CONFIG_VARS=($(aws --profile "$PROFILE"  ec2 describe-instances --filters Name=instance-state-name,Values=running | jq -c '.Reservations[]|.Instances[]|[[.Tags[]|select(.Key | contains("Name"))|.Value],.PublicIpAddress,.KeyName]'))
            fi

        #-------------------------------------------------------------------------------
        # if -t option specified, create ssh config only for tagged instances
        #-------------------------------------------------------------------------------
        else
            # remove any spaces between tags if there are any
            tagsNoSpaces=${TAG//[[:blank:]]/}
            # split on the , and create an array of tags:w
            TAGS=(${tagsNoSpaces//,/ })

            #-------------------------------------------------------------------------------
            # create ssh config for tagged instances
            #-------------------------------------------------------------------------------
            if [[ ${REGION} ]]; then
                CMD_TO_RUN="aws --profile "$PROFILE" --region "$REGION" ec2 describe-instances --filters Name=instance-state-name,Values=running "
            else
                CMD_TO_RUN="aws --profile "$PROFILE" ec2 describe-instances --filters Name=instance-state-name,Values=running "
            fi
            for tagLine in ${TAGS[@]}
            do
                KV=(${tagLine//=/ })
                CMD_TO_RUN+="\"Name=tag-value,Values=${KV[1]}\" "
            done
            CMD_TO_RUN+="| jq -c '.Reservations[]|.Instances[]|[[.Tags[]|select(.Key | contains(\"Name\"))|.Value],.PublicIpAddress,.KeyName]'"

            SSH_CONFIG_VARS=($(eval ${CMD_TO_RUN}))
        fi
    else
        # you have a single host to copy to so get the SSH_CONFIG_VARS for this host
        if [[ ${FIRST_HOST} ]]; then
            HOST_TO_USE=${FIRST_HOST}
        else
            HOST_TO_USE=${SECOND_HOST}
        fi

        if [[ ${REGION} ]]; then
            CMD_TO_RUN="aws --profile "$PROFILE" --region "$REGION" ec2 describe-instances --filters Name=instance-state-name,Values=running "
        else
            CMD_TO_RUN="aws --profile "$PROFILE" ec2 describe-instances --filters Name=instance-state-name,Values=running "
        fi
        CMD_TO_RUN+="\"Name=tag-value,Values=${HOST_TO_USE}\" "
        CMD_TO_RUN+="| jq -c '.Reservations[]|.Instances[]|[[.Tags[]|select(.Key | contains(\"Name\"))|.Value],.PublicIpAddress,.KeyName]'"

        SSH_CONFIG_VARS=($(eval ${CMD_TO_RUN}))
    fi

# list out the destintaions
#    for item in ${SSH_CONFIG_VARS[@]}
#    do
#        echo ${item}
#    done
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  createSSHConfigFile
#   DESCRIPTION:  
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
createSSHConfigFile()
{
    #-------------------------------------------------------------------------------
    # create .ssh directory if it doesn't exist
    #-------------------------------------------------------------------------------
    if [[ ! -d "${SOURCE_DIR}/.ssh" ]]; then
        mkdir "${SOURCE_DIR}/.ssh"
    fi

    #-------------------------------------------------------------------------------
    # create and populate temporary .ssh/config file
    #-------------------------------------------------------------------------------
    TMP_CONFIG=$(mktemp "${HOME}"/.ssh/.config.XXXXX)
    numSSH_CONFIG="${#SSH_CONFIG_VARS[@]}"
    q=0
    while [[ $q -lt ${numSSH_CONFIG} ]]; do
        ITEMLIST=()
        ITEMSTRING=''
        ITEMSTRING=$(echo "${SSH_CONFIG_VARS[${q}]}"|tr -d ']["')
        IFS=$','; ITEMLIST=($ITEMSTRING); unset IFS;
        numItems=${#ITEMLIST[@]}
        if [[ $numItems -gt 2 ]]; then
            if [[ ${ITEMLIST[2]} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]];then
                q=$(($q+1))
                continue
            fi
            pathToKey=''
            getPathToKey ${ITEMLIST[2]} pathToKey
            NEW_SSH_CONFIG_VARS+=("${ITEMLIST[0]},${ITEMLIST[1]},${pathToKey}")
        fi
        q=$(($q+1))
    done

    for theItem in "${NEW_SSH_CONFIG_VARS[@]}"
    do
        IFS=$','; configItemList=($theItem); unset IFS;
        echo "Host ${configItemList[0]}" >> $TMP_CONFIG
        echo " hostname ${configItemList[1]}" >> $TMP_CONFIG
        echo " identityfile \"${configItemList[2]}\"" >> $TMP_CONFIG
        echo " user ubuntu" >> $TMP_CONFIG
        echo >> $TMP_CONFIG
    done
}


#---- end of functions ---------------------------------------------------------

#---- start of main ------------------------------------------------------------

NEW_CMD_LINE=''
APPNAME=''
WORKSPACENAME=''
while [[ $# -gt 0 ]]; do
    case $1 in
        -p ) shift
                PROFILE=$1
                ;;
        -r ) shift
                REGION=$1
	            ;;
        -t ) shift
                TAG=$1
                ;;
        -w ) shift
                HOSTS=$1
	            ;;
        -l ) LIST_NAMES='true'
	            ;;
        -c ) if [[ $# -eq 2 ]]; then
                shift
	            HOST=$1
	        else
	            CONNECT='true'
	        fi
                 ;;
        -L ) LIST_NAMES='true'
             LIST_ALL='true'
                 ;;
        -a | --appName) shift
             APPNAME=$1
             dcDEFAULT_APP_NAME=$1
             NEW_CMD_LINE="${NEW_CMD_LINE} --appName $APPNAME"
                 ;;
        --workspaceName) shift
             NEW_CMD_LINE="${NEW_CMD_LINE} --workspaceName $1"
                 ;;
        -e | --env) shift
             NEW_CMD_LINE="${NEW_CMD_LINE} --env $1"
                 ;;
        --test )
             DO_NOT_RUN='true'
                 ;;
        -h ) usage
             exit 1
	             ;;
 [!-]* ) if [[ $# -eq 2 ]]; then
             FIRST_ARG=$1
             SECOND_ARG=$2
	     elif ! [[ -z "$HOST" ]]; then
             echo -e "Too many/few of the 1 required parameters.\n"
             usage
             exit 1
         fi
                 ;;
#         * ) echo -e "Unrecognized input.\n"
#             usage
#             exit 1
    esac
    shift
done

# determine the key dir
getKeyDir

#determine the hosts
determineHosts

# create the ssh config file the scp will use
createSSHConfigFile

# do the copy
doTheCopy

#-------------------------------------------------------------------------------
# remove temporary .ssh/config file
#-------------------------------------------------------------------------------
if [[ -f "$TMP_CONFIG" ]]; then
    rm "$TMP_CONFIG"
fi
