#!/usr/bin/env bash
#===============================================================================
#
#                    FILE: paws.sh
# 
#                 USAGE: ./paws.sh 
# 
#     DESCRIPTION: Provides access to AWS instances using known keys in the application
#                                utilise keys directory of the app-utils respository
# 
#             OPTIONS: ---
#    REQUIREMENTS: ---
#                    BUGS: ---
#                 NOTES: ---
#                AUTHOR: Gregg Jensen (), gjensen@devops.center
#    ORGANIZATION: devops.center
#             CREATED: 04/03/2017 11:40:09
#            REVISION:    ---
#===============================================================================

#set -o nounset                                                            # Treat unset variables as an error
#set -x

# NOTE: requires pdsh and aws-cli

function usage
{
    echo -e "Description:"
    echo -e "    paws is a tool that makes it easier to connect to and work with AWS EC2 instances.    First, it uses the aws cli tool to query an account for running ec2-instances.    Next, it either returns a list of instances, connects to an individual instance, or runs commands on one or more of them.\n\n    Caution is advised!    (A good sanity check before running any command is using the -l option to see which hosts you're targeting).\n"
    echo -e "Usage:"
    echo -e "    Optional arguments that can be used with any other combination of arguments:"
    echo -e "    [-o organization] [-r REGION]\n"
    echo -e "    List all instances, or instances and their tags:"
    echo -e "    paws {-l | -L}"
    echo -e "        -l\tno argument, returns a list of all instances"
    echo -e "        -L\tno argument, returns a list of all instances and their tags\n"
    echo -e "    Connect to a host interactively:"
    echo -e "    paws -c"
    echo -e "        -c\tno argument, displays a list of hosts and prompts for selection\n"
    echo -e "    Connect to a specified host:"
    echo -e "    paws -c HOST"
    echo -e "        -c\taws Name to log into with SSH\n"
    echo -e "    Run a command on one or more instances in parallel, using a list of names:"
    echo -e "    paws -w HOST1,HOST2 '<COMMAND>'"
    echo -e "        -w\tlist of hosts, separated by commas\n"
    echo -e "    Run a command on one or more instances in parallel, using tags:"
    echo -e "    paws -t KEY=VALUE '<COMMAND>'"
    echo -e "        -t\ttag KEY and VALUE pairs, in the form of KEY=VALUE\n"
    echo -e "    Run a command on all instances in parallel:"
    echo -e "    paws '<COMMAND>'\n"
    echo -e "    Check host access, report any failures and add any new authoritization requests"
    echo -e "    paws -o organization [-r REGION} -x\n"
    echo -e "Examples:"
    echo -e "    List tags for all instances for the default account:    paws -L"
    echo -e "    Interactively connect to an instance for the client1 account in the us-west-2 region:    paws -p client1 -r us-west-2 -c"
    echo -e "    Connect to the web1 instance for the client1 account:    paws -p client1 -c web1"
    echo -e "    Run the 'hostname' command on all instances for the client1 account:    paws -p client1 'hostname'"
    echo -e "    Run the 'ls' command on the web1 and web2 instances for the client1 account:    paws -p client1 -w web1,web2 'ls'"
    echo -e "    Run the 'w' command on instances tagged as Env=dev for the client1 account:    paws -p client1 -t Env=dev 'w'"
    echo -e "    Run the 'date' command on instances tagged as Name=db1 for the default account:    paws -t Name=db1 'date'"
}

if [[ -z $1 ]]; then
    usage
    exit 1
fi

#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  callInstanceInfo
#   DESCRIPTION:  This function will call the instanceinfo.py script and give it
#                 the appropriate arguments.  It will take as one argument the
#                 string that names the shellCommand instanceinfo.py needs to run with
#                 A second argument is the set of tags (as one string) to use
#                 This second argument is optional
#    PARAMETERS:
#       RETURNS:
#-------------------------------------------------------------------------------
callInstanceInfo ()
{
    local shellCommand=$1
    local tagToUse="$2"
    local sortKey=$3

    # we need to build up the command to run with the provided arguments
    CMD_TO_RUN="${dcUTILS}/scripts/instanceinfo.py -sc ${shellCommand} -o ${ORGANIZATION}"

    if [[ -n ${REGION} ]]; then
        CMD_TO_RUN+=" -r ${REGION} "
    fi

    if [[ -n $tagToUse ]]; then
        #-------------------------------------------------------------------------------
        # ensure there isn't a comma after each key=value pair
        #-------------------------------------------------------------------------------
        tagsNoComma=${tagToUse//,/}
        CMD_TO_RUN+=" -t "
        CMD_TO_RUN+="${tagsNoComma}"
        CMD_TO_RUN+=" "
        if [[ -n ${sortKey} ]]; then
            #INST_INFO_OUTPUT=$(${CMD_TO_RUN} -t "${tagsNoComma}" | jq -c "sort_by(.${sortKey})" )
            CMD_OUTPUT=$(${CMD_TO_RUN} -t "${tagsNoComma}")
            if [[ $? -eq 0 ]]; then
                INST_INFO_OUTPUT=$(echo ${CMD_OUTPUT} | jq -c "sort_by(.${sortKey})" )
            else
                echo ${CMD_OUTPUT}
                exit 1
            fi
        else
            CMD_OUTPUT=$(${CMD_TO_RUN} -t "${tagsNoComma}")
            if [[ $? -eq 0 ]]; then
                INST_INFO_OUTPUT=${CMD_OUTPUT}
            else
                echo ${CMD_OUTPUT}
                exit 1
            fi
        fi
    else
        if [[ -n ${sortKey} ]]; then
            CMD_OUTPUT=$(${CMD_TO_RUN})
            if [[ $? -eq 0 ]]; then
                INST_INFO_OUTPUT=$(echo ${CMD_OUTPUT} | jq -c "sort_by(.${sortKey})" )
            else
                echo ${CMD_OUTPUT}
                exit 1
            fi
        else
            CMD_OUTPUT=$(${CMD_TO_RUN})
            if [[ $? -eq 0 ]]; then
                INST_INFO_OUTPUT=${CMD_OUTPUT}
            else
                echo ${CMD_OUTPUT}
                exit 1
            fi
        fi
    fi
}  # -------- end function callInstanceInfo


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  getValueFromSettings
#   DESCRIPTION:  will get the value of the key passed in from ~/.dcConfig/settings
#    PARAMETERS:  the key to look for
#       RETURNS:  the value of the key once it's found
#-------------------------------------------------------------------------------
getValueFromSettings()
{
    keyToFind=$1
    aKeyValue=$(grep "^${keyToFind}" ~/.dcConfig/settings)
    justTheValue=${aKeyValue#*=}
    # remove any double quotes around the value
    var1=${justTheValue#*\"}
    unquotedVar=${var1%\"}
    echo "${unquotedVar#*=}"
}	# ----------  end of function getValueFromSettings  ----------


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  getBasePath
#   DESCRIPTION:  gets the path where this file is executed from...somewhere alone the $PATH
  #    PARAMETERS:
#       RETURNS:
#-------------------------------------------------------------------------------
getBasePath()
{
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was   located
    done
	BASE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
}


#-------------------------------------------------------------------------------
# handle arguments: need conditionals for appropriate number of arguments/options
#-------------------------------------------------------------------------------
doProcessDCEnv() 
{
    if [[ -z ${dcUTILS} ]]; then
        echo "Please set and export dcUTILS environment variable before starting this script"
        exit 1
    else
    set +e
        envToSource="$(${dcUTILS}/scripts/process_dc_env.py ${NEW_CMD_LINE})"

        if [[ $? -ne 0 ]]; then
            echo $envToSource
            exit 1
        else
            eval "$envToSource"
        fi
    set -e
    fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  checkHostAccess
#   DESCRIPTION:  function that will iterate through all instances found for a 
#                 given profile and try to log in.  It will print out any that 
#                 could not be reached.  If there is a new IP of the instance that
#                 needs to be added to the local authorization file it will be accepted
#                 and added.
#    PARAMETERS:  
#       RETURNS:  
#-------------------------------------------------------------------------------
checkHostAccess()
{
    if [[ ${DO_NOT_RUN} == "true" ]]; then
        echo "Would check the following hosts for access:"
        echo 

    else
        echo "Going to checking all the hosts for ssh access.  A response for each connection will be presented:"
    fi

    # first check for expect so that we can script the ssh login
    EXPECT=$(which expect)

    if [[ ! ${EXPECT} ]] ; then 
        echo "Can not run without the \'expect\' module available"
        exit 1
    fi

    declare -a NAME_LIST
    i=0
    numItems=$(echo ${DESCRIBE_ALL} | jq -c 'length')
    while [[ ${i} -lt ${numItems} ]]; do
        NAME_LIST+=($(echo ${DESCRIBE_ALL} | jq -r ".[${i}].InstanceName"))
        i=$((i+1))
    done

    #-------------------------------------------------------------------------------
    # the commented out section was an attempt to check all in parallel.  It does, but
    # the ALL_OUPUT would need to be gone through and looked for specific things.  
    # This would take a lot to make it have user friendly output, when doing them in 
    # order takes just a smidgin more time but the output is WAY more friendly to work 
    # with.  Not to mention it will be easier to maintain.
    # take the list and make it a comma separated string host names
    #-------------------------------------------------------------------------------
    ##TMP_STR=""
    #for HOST_NAME in ${NAME_LIST[@]}
    #do
    #    TMP_STR="${TMP_STR}${HOST_NAME},"
    #done
    ## and the loop added one extra and it's easier to remove after the fact so here it is
    #NAME_LIST_STR=${TMP_STR/%,/}

    #THIS_DIR=$(pwd)
    #EXPECT_CMD="${EXPECT} -f $PWD/scripts/sshcmd.exp %h ${TMP_CONFIG}"
    #ALL_OUTPUT=$(PDSH_SSH_ARGS_APPEND=$(echo -F "$TMP_CONFIG") pdsh -u 30 -R exec -w "$NAME_LIST_STR" ${EXPECT} -f ${THIS_DIR}/scripts/sshcmd.exp %h ${TMP_CONFIG})

    for HOST_NAME in  ${NAME_LIST[@]}
    do
        if [[ ${DO_NOT_RUN} == "false" ]]; then
            # connect to the single host
            #ssh -oStrictHostKeyChecking=no -oCheckHostIP=no -F "$TMP_CONFIG" "$HOST"
            ${EXPECT} -f ${BASE_DIR}/scripts/sshcmd.exp ${HOST_NAME} ${TMP_CONFIG} 2>&1 > /dev/null
            if [[ $? -eq 0 ]]; then
                echo "${HOST_NAME} is good"
            else
                echo "${HOST_NAME} has a problem logging in"
            fi
        else
            # they just want to see what would happen
            echo ${HOST_NAME}
        fi
    done
    echo
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  getPathToKey
#   DESCRIPTION: This function will take the keyName list passed in and go through
#                a set of directories where the private keys could be starting with
#                the most likely and finishing with shared keys directories.  THis
#                uses find in each of the directories to make the search a bit quicker
#                and it starts at the personal .ssh directories as we should default
#                to using the personal keys first and the personal keys are in the list
#                then it will get over to the shared keys directories and picks up the
#                first private one to match and then use it.
#    PARAMETERS:
#       RETURNS:
#-------------------------------------------------------------------------------
getPathToKey()
{
    local keyName=$1
    pathToKey=$2

    #-------------------------------------------------------------------------------
    # first we set up the search paths in a specific order
    #-------------------------------------------------------------------------------
    declare -a SEARCH_PATHS=(
        "${HOME}/.ssh"
        "${HOME}/.ssh/devops.center"
        "${COMMON_KEY_DIR}/devops.center/keys"
        "${COMMON_KEY_DIR}/${ORGANIZATION}/devops.center/keys"
    )

    #-------------------------------------------------------------------------------
    # make an array of strings for the keys
    #-------------------------------------------------------------------------------
    local q=0
    local numItems=$(echo ${keyName} | jq -c 'length')
    declare -a keyNameList
    while [[ ${q} -lt ${numItems} ]]; do
        keyNameList+=($(echo ${keyName} |  jq -r ".[$q]"))
        q=$((q+1))
    done

    #-------------------------------------------------------------------------------
    # now run through the list of search paths in order and look for a key from the keys
    # passed in to match.  Then proceed to the other paths and return when one is found
    #-------------------------------------------------------------------------------
    for aSearchPath in "${SEARCH_PATHS[@]}"
    do
        if [[ -d "${aSearchPath}" ]]; then
            for aKeyName in ${keyNameList[@]}
            do
                RETVAL=$(find "${aSearchPath}" -maxdepth 1 -name "$aKeyName".pem)
                if [[ -n "${RETVAL}" ]]; then
                    eval "$pathToKey=\"${RETVAL}\""
                    return
                fi
            done
        fi
    done

    #-------------------------------------------------------------------------------
    # if we get here a suitable private key was not found
    #-------------------------------------------------------------------------------
    echo "ERROR: can not find a suitable access key to access the host in any of the directories:"
    echo "    ${COMMON_KEY_DIR}/devops.center/keys"
    echo "    ${COMMON_KEY_DIR}/${ORGANIZATION}/devops.center/keys"
    echo "    ${HOME}/.ssh"
    echo "    ${HOME}/.ssh/devops.center"
    exit 1
}

#-------------------- end of function definitions ------------------------------

NEW_CMD_LINE=''
APPNAME=''
WORKSPACENAME=''
DO_NOT_RUN='false'
while [[ $# -gt 0 ]]; do
    case $1 in
        -o ) shift
                ORGANIZATION=$1
                ;;
        # an for legacy we offer the -p but at some point it should go away
        -p ) shift
                ORGANIZATION=$1
                ;;
        -r ) shift
                REGION=$1
	            ;;
        -t ) shift
                TAG=$1
                ;;
        -w ) shift
                HOSTS=$1
	            ;;
        -l ) LIST_NAMES='true'
	            ;;
        -c ) if [[ $# -eq 2 ]]; then
                shift
	            HOST=$1
	        else
	            CONNECT='true'
	        fi
                 ;;
        -L ) LIST_NAMES='true'
             LIST_ALL='true'
                 ;;
        --workspaceName) shift
             NEW_CMD_LINE="${NEW_CMD_LINE} --workspaceName $1"
                 ;;
        -e | --env) shift
             NEW_CMD_LINE="${NEW_CMD_LINE} --env $1"
                 ;;
        -x | --checkHostAccess)
             CHECK_HOST_ACCESS='true'
                 ;;
        --test )
             DO_NOT_RUN='true'
                 ;;
        -h ) usage
             exit 1
	             ;;
 [!-]* ) if [[ $# -eq 1 ]]; then
             PDSH_CMD=$1
	     elif ! [[ -z "$HOST" ]]; then
             echo -e "Too many/few of the 1 required parameters.\n"
             usage
             exit 1
         fi
                 ;;
#         * ) echo -e "Unrecognized input.\n"
#             usage
#             exit 1
    esac
    shift
done

# check to see if an organization was passed and if not use the customer name from ~/.dcConfig/settings
if [[ -z ${ORGANIZATION} ]]; then
    ORGANIZATION=$(getValueFromSettings "CUSTOMER_NAME")
    if [[ -z ${ORGANIZATION} ]]; then
        echo "ERROR: No organization was provided and the default CUSTOMER_NAME was not found in the ~/.dcConfig/settings"
        exit 1
    fi
fi

COMMON_KEY_DIR=''
if [[ ${APPNAME} ]]; then
    doProcessDCEnv
else
    # we will be using the common key directory so we need to get the base name which is under
    # the Google Drive.  Since it could be named something else or just because it has a space in
    # the name, we need to expand it once so that we can use it below when finding the key.
    # dcCOMMON_SHARED_DIR is set when dcUtils is installed and put into the environment.
    dcCOMMON_SHARED_DIR=$(getValueFromSettings "dcCOMMON_SHARED_DIR")

    if [[ -z ${dcCOMMON_SHARED_DIR} ]]; then
        COMMON_KEY_DIR=$(cd $HOME/Googl*;pwd)
    else
        # now we need to check if this is internal or a customer
        dcInternal=$(getValueFromSettings "dcInternal")
        if [[ -z ${dcInternal} ]]; then
            COMMON_KEY_DIR=${dcCOMMON_SHARED_DIR}
        else
            # its internal so adjust the path
            COMMON_KEY_DIR=${dcCOMMON_SHARED_DIR%/*}
        fi
    fi
fi


getBasePath

#-------------------------------------------------------------------------------
# check for the existance of pdsh/ssh command
#-------------------------------------------------------------------------------
if ! [[ "$LIST_NAMES" ]] && ! [[ "$CONNECT" ]] && ! [[ "$HOST" ]] && ! [[ ${CHECK_HOST_ACCESS} ]] && [[ -z "$PDSH_CMD" ]]; then
    echo -e "pdsh/ssh command required.\n"
    usage
    exit 1
fi

#-------------------------------------------------------------------------------
# get the directory of paws
# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
#-------------------------------------------------------------------------------
#SOURCE="${BASH_SOURCE[0]}"
#while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
#    SOURCE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
#    SOURCE="$(readlink "$SOURCE")"
#    [[ $SOURCE != /* ]] && SOURCE="$SOURCE_DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
#done
#SOURCE_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
SOURCE_DIR=$HOME
#

#-------------------------------------------------------------------------------
# LIST ONLY
#-------------------------------------------------------------------------------
if [[ "$LIST_NAMES" == 'true' ]] || [[ "$CONNECT" == 'true' ]]; then

    #-------------------------------------------------------------------------------
    # get full description of running instances from api and filter data using jq
    #-------------------------------------------------------------------------------
    callInstanceInfo "listOfIPAddresses" "${TAG}" "InstanceName"
    DESCRIBE_ALL=${INST_INFO_OUTPUT}

    i=0
    numItems=$(echo ${DESCRIBE_ALL} | jq -c 'length')
    while [[ ${i} -lt ${numItems} ]]; do
        #-------------------------------------------------------------------------------
        # FOR NAMES ONLY number each line to use for selection
        #-------------------------------------------------------------------------------
        hostName=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].InstanceName")
        instancePublicIP=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].PublicIpAddress")
        instancePrivateIP=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].PrivateIpAddress")
        if [[ "$LIST_ALL" != 'true' ]]; then
            if [[ -z ${instancePublicIP} ]]; then
                line="${hostName} (${instancePrivateIP})"
            else
                line="${hostName} (${instancePublicIP})"
            fi
        else
            # put all the tags in the line also
            allTags=$(echo ${DESCRIBE_ALL} | jq -c ".[${i}].Tags")
            tagsAsString=$(echo ${allTags} | jq -r "to_entries|map(select( all(. ; .key != \"Name\")))|from_entries|to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" | tr -s '\n' ' ' )

            if [[ -z ${instancePublicIP} ]]; then
                line="Name=${hostName} PrivateIP=${instancePrivateIP} ${tagsAsString}"
            else
                line="Name=${hostName} PublicIP=${instancePublicIP} ${tagsAsString}"
            fi
        fi
        #-------------------------------------------------------------------------------
        # FOR BOTH NAMES AND ALL
        #-------------------------------------------------------------------------------
        i=$((i+1))
        NUMBERED_LINE="${i}. ${line}\n"
        NUMBERED_LIST="${NUMBERED_LIST}${NUMBERED_LINE}"
    done
fi

#-------------------------------------------------------------------------------
# for -l option, output list and exit
#-------------------------------------------------------------------------------
if [[ "$LIST_NAMES" ]]; then
    echo -en "$NUMBERED_LIST"
    exit
fi

#-------------------------------------------------------------------------------
# for -c but no host specified, so prompt for input
#-------------------------------------------------------------------------------
if [[ -z "${HOST}" ]] && [[ "$CONNECT" ]]; then
    echo -e "$NUMBERED_LIST"
    echo "enter selection number (return to quit)"
    read -r number

    if [[ -z ${number} || ${number} -eq 0 ]]; then
        echo "exiting "
        exit 1
    fi

    while read -r line; do
        LINE_NUMBER=$(echo "$line"|awk -F. '{print $1}')
        if [[ "$LINE_NUMBER" == "$number" ]]; then
            HOST=$(echo -e "$line"|awk '{print $2}')
        fi
    done < <(echo -e "$NUMBERED_LIST")

fi


#-------------------------------------------------------------------------------
# go get the specific information for the selected HOST
#-------------------------------------------------------------------------------
if [[ -n ${HOST} ]]; then
    callInstanceInfo "listOfIPAddresses" "Name=${HOST}"
    DESCRIBE_ALL=${INST_INFO_OUTPUT}
else
    callInstanceInfo "listOfIPAddresses" "${TAG}" "InstanceName"
    DESCRIBE_ALL=${INST_INFO_OUTPUT}
fi

#-------------------------------------------------------------------------------
# create .ssh directory if it doesn't exist
#-------------------------------------------------------------------------------
if [[ ! -d "${SOURCE_DIR}/.ssh" ]]; then
    mkdir "${SOURCE_DIR}/.ssh"
fi

#-------------------------------------------------------------------------------
# go through the instances returned and create a temporary .ssh/config.XXXXX
# file to use to access the hosts
#-------------------------------------------------------------------------------
TMP_CONFIG=$(mktemp "${HOME}"/.ssh/.config.XXXXX)
i=0
numItems=$(echo ${DESCRIBE_ALL} | jq -c 'length')
while [[ ${i} -lt ${numItems} ]]; do
    hostName=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].InstanceName")
    instancePublicIP=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].PublicIpAddress")
    instancePrivateIP=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].PrivateIpAddress")
    instancePublicPort=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].PublicPort")
    instancePrivatePort=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].PrivatePort")
    keyName=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].DestKey")
    gateway=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].Gateway")

    # now get the path to the key
    pathToKey=''
    getPathToKey "${keyName}" pathToKey

    # get the login if there is one
    destLogin=$(echo ${DESCRIBE_ALL} | jq -r ".[${i}].DestLogin")
    if [[ -z ${destLogin} ]]; then
        destLogin="ubuntu"
    fi

    # ok now we need to add the item to the temporary ssh config file
    if [[ ${HOST} ]]; then
        if [[ ${hostName} == ${HOST} ]]; then
            # only one was chosen and it happens to be this one that we are
            # on in the list so grab it and bump out of the loop
            echo "Host ${hostName}" >> ${TMP_CONFIG}
            if [[ -z ${instancePublicIP} ]]; then
                # the private information goes here
                echo " hostname ${instancePrivateIP}" >> ${TMP_CONFIG}
                # and put the port
                if [[ -z ${instancePrivatePort} ]]; then
                    echo " port 22" >> ${TMP_CONFIG}
                else
                    echo " port ${instancePrivatePort}" >> ${TMP_CONFIG}
                fi
            else
                # put the public information
                echo " hostname ${instancePublicIP}" >> ${TMP_CONFIG}
                # and put the port
                if [[ -z ${instancePublicPort} ]]; then
                    echo " port 22" >> ${TMP_CONFIG}
                else
                    echo " port ${instancePublicPort}" >> ${TMP_CONFIG}
                fi
            fi
            echo " identityfile \"${pathToKey}\"" >> ${TMP_CONFIG}
            echo " user ${destLogin}" >> ${TMP_CONFIG}
            if [[ -n ${gateway} ]]; then
                # there is a gateway entry so we need to get the connect parts for this instance
                callInstanceInfo "connectParts" "Name=${hostName}"
                gatewayInfo=${INST_INFO_OUTPUT}

                jumpServerHost=$(echo ${gatewayInfo} | jq -r ".[].JumpServerHost")
                jumpServerPort=$(echo ${gatewayInfo} | jq -r ".[].JumpServerPort")
                jumpServerLogin=$(echo ${gatewayInfo} | jq -r ".[].JumpServerLogin")
                jumpServerKey=$(echo ${gatewayInfo} | jq -r ".[].JumpServerKey")

                jumpServerPathToKey=''
                getPathToKey "${jumpServerKey}" jumpServerPathToKey
                jumpServerCommand="ProxyCommand ssh -i ${jumpServerPathToKey} -W %h:%p -p ${jumpServerPort} ${jumpServerLogin}@${jumpServerHost}"
                echo " ${jumpServerCommand}" >> ${TMP_CONFIG}
            fi
            echo >> ${TMP_CONFIG}
            break
        fi
    else
        # only one was chosen and it happens to be this one that we are
        # on in the list so grab it and bump out of the loop
        echo "Host ${hostName}" >> ${TMP_CONFIG}
        if [[ -z ${instancePublicIP} ]]; then
            # the private information goes here
            echo " hostname ${instancePrivateIP}" >> ${TMP_CONFIG}
            # and put the port
            if [[ -z ${instancePrivatePort} ]]; then
                echo " port 22" >> ${TMP_CONFIG}
            else
                echo " port ${instancePrivatePort}" >> ${TMP_CONFIG}
            fi
        else
            # put the public information
            echo " hostname ${instancePublicIP}" >> ${TMP_CONFIG}
            # and put the port
            if [[ -z ${instancePublicPort} ]]; then
                echo " port 22" >> ${TMP_CONFIG}
            else
                echo " port ${instancePublicPort}" >> ${TMP_CONFIG}
            fi
        fi
        echo " identityfile \"${pathToKey}\"" >> ${TMP_CONFIG}
        echo " user ${destLogin}" >> ${TMP_CONFIG}
        if [[ ! -z ${gateway} ]]; then
            # there is a gateway entry so we need to get the connect parts for this instance
            callInstanceInfo "connectParts" "Name=${hostName}"
            gatewayInfo=${INST_INFO_OUTPUT}

            jumpServerHost=$(echo ${gatewayInfo} | jq -r ".[].JumpServerHost")
            jumpServerPort=$(echo ${gatewayInfo} | jq -r ".[].JumpServerPort")
            jumpServerLogin=$(echo ${gatewayInfo} | jq -r ".[].JumpServerLogin")
            jumpServerKey=$(echo ${gatewayInfo} | jq -r ".[].JumpServerKey")

            jumpServerPathToKey=''
            getPathToKey "${jumpServerKey}" jumpServerPathToKey
            jumpServerCommand="ProxyCommand ssh -i ${jumpServerPathToKey} -W %h:%p -p ${jumpServerPort} ${jumpServerLogin}@${jumpServerHost}"
            echo " ${jumpServerCommand}" >> ${TMP_CONFIG}
        fi
        echo >> ${TMP_CONFIG}
    fi
    i=$((i+1))
done

#-------------------------------------------------------------------------------
# if the -c option is specified, connect to the host with ssh
#-------------------------------------------------------------------------------
if [[ "$HOST" ]] || [[ ${CHECK_HOST_ACCESS} == 'true' ]]; then
    if [[ ${CHECK_HOST_ACCESS} == 'true' ]]; then
        # run the function that will iterate over all the hosts
        checkHostAccess
    else
        # connect to the single host
        ssh -F "$TMP_CONFIG" "$HOST"
    fi
#-------------------------------------------------------------------------------
# otherwise, run commands with pdsh
#-------------------------------------------------------------------------------
else
    if ! [[ "$HOSTS" ]]; then
        #-------------------------------------------------------------------------------
        # generate host list to pass pdsh
        #-------------------------------------------------------------------------------
        HOSTS=$(grep Host "$TMP_CONFIG"|awk '{print $2}'|tr '\n' ',')
    fi
    #-------------------------------------------------------------------------------
    # final pdsh command
    #-------------------------------------------------------------------------------
    if [[ ${DO_NOT_RUN} == 'false' ]]; then
        # go ahead and run it

        PDSH_OUTPUT=$(PDSH_SSH_ARGS_APPEND=$(echo -F "$TMP_CONFIG") pdsh -u 30 -w "$HOSTS" "$PDSH_CMD" 2>&1)
        IFS=$'\n'; PDSH_OUTPUT_LIST=(${PDSH_OUTPUT}); unset IFS
        for aLine in "${PDSH_OUTPUT_LIST[@]}"; do
            if [[ "${aLine}" == *"Operation timed out"* ]]; then
                THE_BAD_HOST=${aLine%%:*}
                echo "CRITICAL: This host could not be reached: ${THE_BAD_HOST}"
            elif [[ "${aLine}" != *"ssh exited with exit code"* ]]; then
                echo "${aLine}"
            fi
        done

    else
        # they just want to see what would happen
        echo 
        echo "Test would run command: $PDSH_CMD"
        echo
        echo "For these hosts:"
        for aHost in ${HOSTS//,/ }
        do
            echo ${aHost}
        done
        echo 

    fi
fi

#-------------------------------------------------------------------------------
# remove temporary .ssh/config file
#-------------------------------------------------------------------------------
if [[ -f "$TMP_CONFIG" ]]; then
    rm "$TMP_CONFIG"
fi
